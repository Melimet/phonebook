{"version":3,"sources":["services/ContactService.js","components/ContactForm.js","components/Contacts.js","components/Filter.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","personId","object","put","ContactForm","newName","newNumber","persons","setPersons","setNewName","setNewNumber","setMessage","createNewContact","newContact","ContactService","returnedContact","concat","type","text","updateContact","person","find","name","map","contact","onSubmit","event","preventDefault","number","filter","length","window","confirm","value","onChange","target","Contacts","newFilter","list","toLowerCase","includes","key","onClick","p","catch","Filter","setNewFilter","Notification","message","undefined","className","App","useState","useEffect","initialContacts","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38c0fc40.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data);\r\n}\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst update = (personId, object) => {\r\n\r\n  const request = axios.put(`${baseUrl}/${personId}`, object)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update };","import React from \"react\";\r\nimport ContactService from \"../services/ContactService\";\r\n\r\n\r\nconst ContactForm = ({newName, newNumber, persons, setPersons, setNewName, setNewNumber, setMessage}) => {\r\n\r\n  const addContact = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact = {\r\n      name: newName,\r\n      number: newNumber\r\n    };\r\n\r\n    persons.filter(person => person.name === newName).length ?\r\n      window.confirm(`${newName} is already in the phonebook, update current info?`) && updateContact(newContact)\r\n      : createNewContact(newContact)\r\n  };\r\n\r\n  const createNewContact = (newContact) => {\r\n    ContactService\r\n      .create(newContact)\r\n      .then(returnedContact => {\r\n        setPersons(persons.concat(returnedContact))\r\n        const newMessage = {\r\n          type: 'success',\r\n          text: 'Successfully added a new contact!'\r\n        }\r\n        setMessage(newMessage)\r\n      });\r\n\r\n    setNewName('');\r\n    setNewNumber('');\r\n  }\r\n\r\n  const updateContact = (newContact) => {\r\n\r\n    const person = persons.find(person => newContact.name === person.name)\r\n\r\n    ContactService\r\n      .update(person.id, newContact)\r\n      .then(returnedContact => {\r\n        setPersons(persons.map(contact => contact.id !== person.id ? contact : returnedContact))\r\n        const newMessage = {\r\n          type: 'success',\r\n          text: 'Successfully updated contact!'\r\n        }\r\n        setMessage(newMessage)\r\n      })\r\n  }\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  };\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add a new contact</h2>\r\n      <form onSubmit={addContact}>\r\n        <p>Name:<input value={newName}\r\n                       onChange={handleNameChange}/></p>\r\n        <p>Number:<input value={newNumber}\r\n                         onChange={handleNumberChange}/></p>\r\n        <div>\r\n          <button type=\"submit\">add contact</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactForm","import React from \"react\";\r\nimport ContactService from \"../services/ContactService\";\r\n\r\nconst Contacts = ({persons, newFilter, setPersons, setMessage}) => {\r\n\r\n  const removeContact = id => {\r\n\r\n    window.confirm(`Are you sure you want to delete this contact?`) &&\r\n      ContactService.remove(id)\r\n        .then(() => {\r\n          setPersons(persons.filter(p => p.id !== id))\r\n          const newMessage = {\r\n            type : 'success',\r\n            text : 'Successfully removed contact'\r\n          }\r\n          setMessage(newMessage);\r\n        })\r\n        .catch(() => {\r\n          const newMessage = {\r\n            type: 'error',\r\n            text: 'This contact has already been removed from the server'\r\n          }\r\n          setMessage(newMessage)\r\n          setPersons(persons.filter(p => p.id !== id))\r\n        })\r\n  }\r\n\r\n  const filterList = (person) => {\r\n    return (\r\n      person.name.toLowerCase().includes(newFilter.toLowerCase())\r\n    )\r\n  }\r\n\r\n  const list = persons.filter(filterList);\r\n  return (\r\n\r\n    <div>\r\n      <h2>Numbers</h2>\r\n      {list.map(person => <div key={person.name}>\r\n        {person.name} {person.number} <button onClick={() => removeContact(person.id)}>Remove</button> </div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contacts","import React from \"react\";\r\n\r\nconst Filter = ({newFilter, setNewFilter}) => {\r\n\r\n\r\n  const handleFilterChange = (event) => {\r\n    setNewFilter(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Filter names</p>\r\n      <form>\r\n        <input value={newFilter} onChange={handleFilterChange}>\r\n        </input>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React, {useState, useEffect} from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n\r\n  if (message===undefined){\r\n    return null\r\n  }\r\n  return <div className={message.type}>{message.text}</div>\r\n\r\n}\r\n\r\nexport default Notification","import React, {useState, useEffect} from 'react'\nimport ContactForm from \"./components/ContactForm\";\nimport Contacts from \"./components/Contacts\";\nimport Filter from \"./components/Filter\";\nimport ContactService from \"./services/ContactService\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newFilter, setNewFilter] = useState('');\n  const [message, setMessage] = useState({})\n\n  useEffect(() => {\n    ContactService\n      .getAll()\n      .then(initialContacts => {\n        setPersons(initialContacts);\n      })\n  }, [])\n\n    return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message}/>\n      <Filter newFilter={newFilter} setNewFilter={setNewFilter}/>\n      <ContactForm newName={newName} setNewName={setNewName} persons={persons} setPersons={setPersons}\n                   newNumber={newNumber} setNewNumber={setNewNumber} setMessage={setMessage}/>\n      <Contacts persons={persons} newFilter={newFilter} setPersons={setPersons} setMessage={setMessage}/>\n    </div>\n  )\n};\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}